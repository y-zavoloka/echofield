name: CI/CD Deploy

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
  R2_BUCKET: ${{ secrets.R2_BUCKET }}
  R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
  R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate .env file
        run: |
          cat > .env <<EOF
          POSTGRES_DB=echofield
          POSTGRES_USER=echouser
          POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_USER=echouser
          DB_NAME=echofield
          DB_HOST=db
          DEBUG=False
          SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          ALLOWED_HOSTS=echofield.dev,.echofield.dev,static.echofield.dev
          CSRF_TRUSTED_ORIGINS=https://echofield.dev,https://static.echofield.dev
          R2_BUCKET=echofield-static
          R2_ENDPOINT=${{ secrets.R2_ENDPOINT }}
          R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_S3_REGION_NAME=auto
          R2_CUSTOM_DOMAIN=static.echofield.dev
          USE_R2_STATIC=True
          USE_SSL=True
          EOF

      - name: Prepare deploy directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e
            mkdir -p /opt/echofield
            # Create backup of current deployment
            if [ -d "/opt/echofield/backup" ]; then
              rm -rf /opt/echofield/backup
            fi
            if [ -d "/opt/echofield" ] && [ "$(ls -A /opt/echofield)" ]; then
              mkdir -p /opt/echofield/backup
              cp -r /opt/echofield/* /opt/echofield/backup/ 2>/dev/null || true
            fi
            # Clean current deployment
            find /opt/echofield -mindepth 1 -maxdepth 1 ! -name 'backup' -exec rm -rf {} +

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          source: "."
          target: "/opt/echofield"
          overwrite: true

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e
            
            # Set variables
            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            
            # Navigate to deployment directory
            cd /opt/echofield
            
            # Ensure Docker is available
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed or not in PATH"
              exit 1
            fi
            
            # Login to GHCR
            echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull the latest image
            echo "Pulling Docker image: $IMAGE_NAME:latest"
            docker pull $IMAGE_NAME:latest
            
            # Stop existing containers
            echo "Stopping existing containers..."
            docker compose down || true
            
            # Remove unused images and containers
            docker system prune -f || true
            
            # Start new containers
            echo "Starting new containers..."
            docker compose up -d
            
            # Wait for containers to be healthy
            echo "Waiting for containers to start..."
            sleep 10
            
            # Check if containers are running
            if ! docker compose ps | grep -q "Up"; then
              echo "Deployment failed - containers are not running"
              echo "Container logs:"
              docker compose logs
              exit 1
            fi
            
            echo "Deployment completed successfully"
            
            # Clean up old backup
            if [ -d "/opt/echofield/backup" ]; then
              rm -rf /opt/echofield/backup
            fi
